// 数组的每个对象表示一轮操作
// 即: 这句歌词触发的游戏按键
// 注意: 每个延迟时间, 都会阻塞下一步操作; 如果相邻按键没有延迟时间, 则会同时触发
[
  {
    // 显示歌词
    words: "我要这天再遮不住我眼",

    // 歌词的起始时间
    // 进度条和显示歌词时需要使用到它
    // 即: 当前歌词, 应该 time 秒时播放
    time: 10, // 单位 s

    // 歌词按键操作
    // 需要按下几次, 每个子数组表示按下一次
    // 这里就是需要按下 2 次
    // 为什么是子数组, 而不是子对象?
    // => 因为考虑到需要有混音, 即: 同一时间, 多个键一起按下的情况
    data: [
      // 按下第 1 次
      // 此数组的每个对象表示此次按下, 会同时按下的键 (进行混音)
      [
        // 延迟多久 ms, 才触发第 1 次按下
        500,
        {
          key: 1, // 按下键 1
          delay: 10, // 此键延迟多久按下  ms
          pressDuration: 2000, // 此键按下持续时间(ms), 默认为 1000ms
        },
        {
          // 由于键 1 延迟 10ms, 所以会先按下 2, 然后过 10ms 按下 1, 并持续 2000ms, 才松开
          key: 2, // 按下键 2
        },
      ],

      // 按下第 2 次
      // => 这里将同时按下 3 和 4 游戏键
      [
        0, // 不延迟, 第 1 次按键结束, 直接按下 3, 4
        {
          key: 3,
        },
        {
          key: 4,
        },
      ],
    ],
  },
];
